generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  email    String  @unique
  avatar   String?
  password String
  roleId   String  @map("role_id") @db.Uuid

  refreshTokens RefreshToken[]

  role          Role     @relation(fields: [roleId], references: [id])
  organizations Member[]
  invites       Invite[]

  @@map("accounts")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  accountId String   @map("account_id") @db.Uuid
  expiresAt DateTime @map("expires_at")

  account Account @relation(fields: [accountId], references: [id])

  @@map("refresh_tokens")
}

model Role {
  id      String  @id @default(uuid()) @db.Uuid
  name    String  @unique
  default Boolean @default(false)

  accounts             Account[]
  permissions          RolePermissions[]
  organizationMembers  Member[]
  organizationsInvites Invite[]

  @@map("roles")
}

model Permissions {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
  code String @unique

  roles RolePermissions[]

  @@map("permissions")
}

model RolePermissions {
  roleId         String @map("role_id") @db.Uuid
  permissionCode String @map("permission_code")

  role       Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permissions @relation(fields: [permissionCode], references: [code], onDelete: Cascade)

  @@id([roleId, permissionCode])
  @@map("role_permissions")
}

model Organization {
  id                        String  @id @default(uuid()) @db.Uuid
  name                      String
  slug                      String  @unique
  logo                      String?
  domain                    String  @unique
  shouldAttachUsersByDomain Boolean @default(false) @map("should_attach_users_by_domain")

  members Member[]
  invites Invite[]

  @@map("organizations")
}

model Member {
  id             String @id @default(uuid()) @db.Uuid
  accountId      String @map("account_id") @db.Uuid
  organizationId String @map("organization_id") @db.Uuid
  roleId         String @map("role_id") @db.Uuid

  account      Account      @relation(fields: [accountId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  role         Role         @relation(fields: [roleId], references: [id])

  @@map("members")
}

model Invite {
  id             String   @id @default(uuid()) @db.Uuid
  email          String   @unique
  organizationId String   @map("organization_id") @db.Uuid
  roleId         String   @map("role_id") @db.Uuid
  authorId       String   @map("author_id") @db.Uuid
  expiresAt      DateTime @map("expires_at")

  organization Organization @relation(fields: [organizationId], references: [id])
  role         Role         @relation(fields: [roleId], references: [id])
  author       Account      @relation(fields: [authorId], references: [id])

  @@map("invites")
}
